import com.ibm.websphere.jaxrs20.multipart.AttachmentBuilder;
import com.ibm.websphere.jaxrs20.multipart.IAttachment;
import com.mongodb.client.MongoCollection;
import edu.oswego.cs.rest.daos.AssignmentNoPeerReviewDAO;
import edu.oswego.cs.rest.daos.FileDAO;
import edu.oswego.cs.rest.daos.PeerReviewAddOnDAO;
import edu.oswego.cs.rest.database.AssignmentInterface;
import edu.oswego.cs.rest.database.DatabaseManager;
import org.bson.Document;
import org.junit.jupiter.api.*;

import java.io.IOException;
import java.util.ArrayList;

import static com.mongodb.client.model.Filters.eq;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

//
//// DISCLAIMER: Don't run all the tests at the same time. You'll likely screw up the database and fail the tests in some way.
//// Read through the tests to see what they create, update and delete before you run them please.
//
public class ProfessorAssignmentTests {
//
//    private static final Jsonb jsonb = JsonbBuilder.create();
//    private static final ArrayList<AssignmentDAO> expectedAssignments = new ArrayList<>();
//    private static String port;
//    private static String baseUrl;
//    private static String targetUrl;
//    private static AssignmentDAO assignment1, assignment1Edited, assignment2, assignment3;
//    private Client client;
//    private static int assignmentIdCount;
//
//    @BeforeAll
//    public static void oneTimeSetup() {
//        port = "13125";
//        baseUrl = "https://moxie.cs.oswego.edu:" + port + "/assignments/professor";
//
//
//        // variables for inserted assignments
//        String aName1 = "Response Types Essay 1";
//        String instructions1 = "Wait, there's an instructions field in the AssignmentDAO?";
//        String instructions1E = "Okay, I lied, I'm still to lazy to put actual instructions in here, but c'mon!" +
//                "It's still a String at the end of the day!";
//        String dueDate1 = "03/10/2022";
//        String courseID1 = "CSC378-800-54266-Spring-2023"; // JUnit Theory Course
//        int points1 = 25;
//
//        String aName2 = "Response Types Essay 2";
//        String instructions2 = "Awesome! I'm not entirely sure what to put here, so I'll just leave this brief stream of consciousness here for now.";
//        String dueDate2 = "04/10/2022";
//        String courseID2 = "CSC378-800-54266-Spring-2023"; // JUnit Theory Course
//        int points2 = 35;
//
//        String aName3 = "Response Types Essay 3";
//        String instructions3 = " If you're seeing this, know that I plan to update it soon to something more appropriate. :D";
//        String dueDate3 = "05/10/2022";
//        String courseID3 = "CSC378-800-54266-Spring-2023"; // JUnit Theory Course
//        int points3 = 45;
//
//        // what happens if we make an assignment without the allocated course being there...
//        assignment1 = new AssignmentDAO(aName1, instructions1, dueDate1, courseID1, points1);
//        assignment1Edited = new AssignmentDAO(aName1, instructions1E, dueDate1, courseID1, points1);
//        assignment2 = new AssignmentDAO(aName2, instructions2, dueDate2, courseID2, points2);
//        assignment3 = new AssignmentDAO(aName3, instructions3, dueDate3, courseID3, points3);
//
//        // we will add these assignments to the database
//        expectedAssignments.add(assignment1);
//        expectedAssignments.add(assignment2);
//        expectedAssignments.add(assignment3);
//    }
//
//    @BeforeEach
//    public void setup() {
//        client = ClientBuilder.newClient();
//
//        // add some temp assignments to the DB
//        expectedAssignments.forEach(assignment -> {
//            String createURL = baseUrl + "/courses/create-assignment/";
//            WebTarget target = client.target(createURL);
//            target.request(MediaType.APPLICATION_JSON)
//                    .accept(MediaType.APPLICATION_JSON)
//                    .post(Entity.entity(jsonb.toJson(assignment), MediaType.APPLICATION_JSON));
//        });
//    }
//
//    @AfterEach
//    public void teardown() {
//
//        // remove added assignments from the DB
//        expectedAssignments.forEach(assignment -> {
//            String deleteURL = baseUrl + "/courses/" + assignment.getCourseID() + "/assignments/" + assignment.getAssignment_id() + "/remove/";
//            WebTarget target = client.target(deleteURL);
//            target.request(MediaType.APPLICATION_JSON)
//                    .accept(MediaType.APPLICATION_JSON)
//                    .delete();
//        });
//        client.close();
//    }
//
//    @Test
//    public void testCreateAssignment() {
//
//        targetUrl = "/courses/create-assignment/";
//        WebTarget target = client.target(baseUrl + targetUrl);
//        Response addAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .post(Entity.entity(jsonb.toJson(assignment1), MediaType.APPLICATION_JSON));
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(addAssignmentResponse.getStatus()), "Assignment was not added properly.");
//    }
//
//    @Test
//    public void testUpdateAssignment() {
//
//        targetUrl = "/courses/" + assignment1.getCourseID() + "/assignments/" + assignmentIdCount + "/edit/";
//        WebTarget target = client.target(baseUrl + targetUrl);
//        Response updateAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .put(Entity.entity(jsonb.toJson(assignment1Edited), MediaType.APPLICATION_JSON));
//
//        // test will observe to see if it returned a positive response
//        // think of how you can enter faulty assignments here, like in M1 and log the results
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(updateAssignmentResponse.getStatus()), "Assignment was not revised properly.");
//    }
//
//    @Test
//    public void testDeleteAssignment() {
//
//        targetUrl = "/courses/" + assignment1.getCourseID() + "/assignments/" + assignmentIdCount + "/remove/";
//        WebTarget target = client.target(baseUrl + targetUrl);
//        Response removeAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .delete();
//
//        // test will observe to see if it returned a positive response
//        // think of how you can enter faulty assignments here, like in M1 and log the results
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(removeAssignmentResponse.getStatus()), "Assignment was not deleted properly.");
//    }
//
//    @Test
//    public void testCreateUpdateAndDeleteAssignment() {
//
//        targetUrl = "/courses/create-assignment/";
//        WebTarget target = client.target(baseUrl + targetUrl);
//        Response addAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .post(Entity.entity(jsonb.toJson(assignment1), MediaType.APPLICATION_JSON));
//
//        // test will observe to see if it returned a positive response
//        // think of how you can enter faulty assignments here, like in M1 and log the results
//
//        // derive the assignmentID number, since this is tied to the course object, but out of the assignment objects territory
//        targetUrl = "/courses/"+assignment1.getCourseID()+"/assignments/";
//        target = client.target(baseUrl + targetUrl);
//        Response response = target.request().get();
//        List assignmentObjects = jsonb.fromJson(response.readEntity(String.class), ArrayList.class);
//        for (Object o : assignmentObjects) {
//            HashMap mapO = (HashMap) o;
//            if(assignment1.getAssignmentName().equals(mapO.get("assignment_name"))){
//                assignmentIdCount = Integer.parseInt(String.valueOf(mapO.get("assignment_id")));
//                System.out.println("AssignmentID = "+ assignmentIdCount);
//            }
//        }
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(addAssignmentResponse.getStatus()), "Assignment was not added properly.");
//
//        targetUrl = "/courses/" + assignment1.getCourseID() + "/assignments/" + assignmentIdCount + "/edit/";
//        target = client.target(baseUrl + targetUrl);
//        Response updateAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .put(Entity.entity(jsonb.toJson(assignment1Edited), MediaType.APPLICATION_JSON));
//
//        // test will observe to see if it returned a positive response
//        // think of how you can enter faulty assignments here, like in M1 and log the results
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(updateAssignmentResponse.getStatus()), "Assignment was not revised properly.");
//
//        targetUrl = "/courses/" + assignment1.getCourseID() + "/assignments/" + assignmentIdCount + "/remove/";
//        target = client.target(baseUrl + targetUrl);
//        Response removeAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .delete();
//
//        // test will observe to see if it returned a positive response
//        // think of how you can enter faulty assignments here, like in M1 and log the results
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(removeAssignmentResponse.getStatus()), "Assignment was not deleted properly.");
//    }
//
//    // courseID's cannot have spaces in the abbreviations
//    // assID will still go up even if you delete them from the assignment's database! The course will always remember how many assignments there have been!
//    @Test
//    public void testCreateAndDeleteAssignment() {
//
//        targetUrl = "/courses/create-assignment/";
//        WebTarget target = client.target(baseUrl + targetUrl);
//        Response addAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .post(Entity.entity(jsonb.toJson(assignment1), MediaType.APPLICATION_JSON));
//
//        // test will observe to see if it returned a positive response
//        // think of how you can enter faulty assignments here, like in M1 and log the results
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(addAssignmentResponse.getStatus()), "Assignment was not added properly.");
//
//        targetUrl = "/courses/" + assignment1.getCourseID() + "/assignments/" + assignment1.getAssignment_id() + "/remove/";
//        target = client.target(baseUrl + targetUrl);
//        Response removeAssignmentResponse = target.request(MediaType.APPLICATION_JSON)
//                .accept(MediaType.APPLICATION_JSON)
//                .delete();
//
//        // test will observe to see if it returned a positive response
//        // think of how you can enter faulty assignments here, like in M1 and log the results
//
//        Assertions.assertEquals(Response.Status.OK, Response.Status.fromStatusCode(removeAssignmentResponse.getStatus()), "Assignment was not deleted properly.");
//    }
//
//    @Test
//    public void viewAssignmentsTest() {
//
//        targetUrl = "/assignments/";
//
//        WebTarget target = client.target(baseUrl + targetUrl);
//        Response response = target.request().get();
//        System.out.println("response: " + response.readEntity(String.class));
//
//        // read each of the objects from the db as jsons!
//        List assignmentObjects = jsonb.fromJson(response.readEntity(String.class), ArrayList.class);
//        ArrayList<AssignmentDAO> assignments = new ArrayList<>();
//
//        for (Object o : assignmentObjects) {
//            HashMap mapO = (HashMap) o;
//            assignments.add(new AssignmentDAO(
//                    (String) mapO.get("assignment_name"),
//                    (String) mapO.get("instructions"),
//                    (String) mapO.get("due_date"),
//                    (String) mapO.get("course_id"),
//                    Integer.parseInt(String.valueOf(mapO.get("points")))
//            ));
//        }
//
//        ArrayList<AssignmentDAO> actualAssignments = new ArrayList<>();
//
//        // compare the assignments we made before to the assignments in the database.
//        // This should NOT work if we entered anything funky that could mess things up DB side...
//        assignments.forEach(assignment -> {
//            for (AssignmentDAO a : expectedAssignments) {
//                if (a.getAssignmentName().equals(assignment.getAssignmentName()) &&
//                        a.getCourseID().equals(assignment.getCourseID()) &&
//                        a.getDueDate().equals(assignment.getDueDate()) &&
//                        a.getInstructions().equals(assignment.getInstructions()) &&
//                        a.getPoints() == assignment.getPoints())
//                    actualAssignments.add(assignment);
//            }
//        });
//
//        // test passes if the courses were successfully entered into the db
//        Assertions.assertEquals(expectedAssignments.size(), actualAssignments.size(), "Not all assignments were retrieved.");
//    }
//
//    // won't work if you accidentally put assignments with the same data in them beforehand
//    @Test
//    public void viewAssignmentsWithinCourseTest() {
//
//        targetUrl = "/courses/"+assignment1.getCourseID()+"/assignments/";
//
//        WebTarget target = client.target(baseUrl + targetUrl);
//        Response response = target.request().get();
//        System.out.println("response: " + response.readEntity(String.class));
//
//        // read each of the objects from the db as jsons!
//        List assignmentObjects = jsonb.fromJson(response.readEntity(String.class), ArrayList.class);
//        ArrayList<AssignmentDAO> assignments = new ArrayList<>();
//
//        for (Object o : assignmentObjects) {
//            HashMap mapO = (HashMap) o;
//            assignments.add(new AssignmentDAO(
//                    (String) mapO.get("assignment_name"),
//                    (String) mapO.get("instructions"),
//                    (String) mapO.get("due_date"),
//                    (String) mapO.get("course_id"),
//                    Integer.parseInt(String.valueOf(mapO.get("points")))
//            ));
//        }
//
//        ArrayList<AssignmentDAO> actualAssignments = new ArrayList<>();
//
//        // compare the assignments we made before to the assignments in the database.
//        // This should NOT work if we entered anything funky that could mess things up DB side...
//        assignments.forEach(assignment -> {
//            for (AssignmentDAO a : expectedAssignments) {
//                if (a.getAssignmentName().equals(assignment.getAssignmentName()) &&
//                        a.getCourseID().equals(assignment.getCourseID()) &&
//                        a.getDueDate().equals(assignment.getDueDate()) &&
//                        a.getInstructions().equals(assignment.getInstructions()) &&
//                        a.getPoints() == assignment.getPoints())
//                    actualAssignments.add(assignment);
//            }
//        });
//
//        // test passes if the courses were successfully entered into the db
//        Assertions.assertEquals(expectedAssignments.size(), actualAssignments.size(), "Not all assignments were retrieved.");
//    }
//
//    // For whatever reason, AttachmentBuilder.newBuilder is recognized at compiler time but not at run time...?
//    // gives a NoClassDefFoundError if you try to run this test. I explored different dependency versions to fix this,
//    // ... but no dice. Figured this was becoming more trouble than it was worth, so I switched tactics a bit.
//    // For this reason, any tests that involve a file upload/download are only ever done in Postman.
//
//    @Test
//    public void uploadFileTest() {
//        targetUrl = "/courses/"+assignment1.getCourseID()+"/assignments/"+assignmentIdCount+"/upload";
//        // (NOT INCLUDED HERE)
//    }
//
//    @Test
//    public void downloadFileTest() {
//        String fileName = "";
//        targetUrl = "/courses/"+assignment1.getCourseID()+"/assignments/"+assignmentIdCount+"/download/"+fileName;
//        // (NOT INCLUDED HERE)
//    }
//
//    @Test
//    public void viewFilesTest() {
//      targetUrl = "/courses/"+assignment1.getCourseID()+"/assignments/"+assignmentIdCount+"/view-files";
//        // (NOT INCLUDED HERE)
//    }
//    @Test
//    void uploadAssignmentFilesTest() throws IOException {
//        //make a dummy assignment in the database
//
//        //String fileBase64 = "";
//        MongoCollection<Document> courses = new DatabaseManager().getCourseDB().getCollection("courses");
//        MongoCollection<Document> assignments = new DatabaseManager().getAssignmentDB().getCollection("assignments");
//        Document course = new Document();
//        course
//                .append("abbreviation", "CSC212")
//                .append("course_id", "CSC212-100-Spring-2023")
//                .append("course_name", "Intro to CS")
//                .append("course_section", "100")
//                .append("crn", "12345")
//                .append("professor_id", "daltamur")
//                .append("semester", "spring")
//                .append("students", new ArrayList<String>())
//                .append("team_size", 1)
//                .append("year", "2023");
//        courses.insertOne(course);
//
//        Document assignment=new Document();
//        assignment
//                .append("assignment_id", 5000)
//                .append("assignment_name", "Solve the SPainter Problem")
//                .append("course_id", "CSC212-100-Spring-2023")
//                .append("due_date", "2024-03-24")
//                .append("instructions", "Write a program to solve the problem given in the attached instructions")
//                .append("peer_review_due_date", "2023-04-15")
//                .append("peer_review_instructions", "Rate your classmate's solution out of 15 points")
//                .append("peer_review_points", 15)
//                .append("points", 15)
//                .append("submission_is_past_due", false)
//                .append("peer_review_is_past_due", false)
//                .append("grade_finalized", false)
//                .append("assigned_teams", new ArrayList<>())
//                .append("completed_teams", new ArrayList<>())
//                .append("all_teams", new ArrayList<>())
//                .append("reviews_per_team",1);
//        assignments.insertOne(assignment);
//
//        assertEquals(assignment.get("points"), 15);
//
//
//        //upload instruction, template, and rubric data
//        IAttachment instructionsAttachment = AttachmentBuilder.newBuilder("instructions")
//                //file stuff will go here
//                .build();
//        System.out.println("asdf");
//        FileDAO instructionsDAO = FileDAO.fileFactory("instructions.docx", "CSC212-100-Spring-2023", instructionsAttachment, 5000);
//        new AssignmentInterface().writeToAssignment(instructionsDAO);
//
//        //get rid of the test assignment and course
//        courses.findOneAndDelete(eq("course_id","CSC 101-800-12312-Spring-2023"));
//    }

    @Test
    public void makeAssignmentNoPeerReview() throws IOException {
        // Note that this test runs under the assumption that the assignments database is empty
        // Make a dummy assignment
        AssignmentNoPeerReviewDAO testDAO = new AssignmentNoPeerReviewDAO("CSC212-800-12313-Spring-2023", "Rate your classmate's submission", "Rate your classmate's java solution on a scale of 1-10", "2023-05-15", 10);
        Document madeAssignment = new AssignmentInterface().createAssignmentNoPeerReview(testDAO);
        // Find the assignment and make sure it contains no peer review data and that it does, in fact, exist
        Document foundAssignment = new AssignmentInterface().getSpecifiedAssignment("CSC212-800-12313-Spring-2023", (Integer) madeAssignment.get("assignment_id"));
        //we don't really have to make sure every single value gets copied over, it's fine just to make sure it exists and contains on peer review data
        assertNotNull(foundAssignment);
        assertEquals(foundAssignment.get("has_peer_review"), false);
        new AssignmentInterface().removeAssignment((Integer) foundAssignment.get("assignment_id"), "CSC212-800-12313-Spring-2023");
    }


    @Test
    public void updateAssignmentNoPeerReview() throws IOException {
        //make an assignment to go into the DB that we will later edit
        AssignmentNoPeerReviewDAO testDAO = new AssignmentNoPeerReviewDAO("CSC212-800-12313-Spring-2023", "Rate your classmate's submission", "Rate your classmate's java solution on a scale of 1-10", "2023-05-15", 10);
        Document madeAssignment = new AssignmentInterface().createAssignmentNoPeerReview(testDAO);
        AssignmentNoPeerReviewDAO updatedTestDAO = new AssignmentNoPeerReviewDAO("CSC212-800-12313-Spring-2023", "Java Solution Review", "Rate your classmate's java solution on a scale of 1-100", "2023-05-16", 100);
        new AssignmentInterface().updateAssignmentWithNoPeerReview(updatedTestDAO, "CSC212-800-12313-Spring-2023", (Integer) madeAssignment.get("assignment_id"));
        //find the assignment after updating it, assert the values are equal to the updated ones
        Document foundAssignment = new AssignmentInterface().getSpecifiedAssignment("CSC212-800-12313-Spring-2023", (Integer) madeAssignment.get("assignment_id"));
        assertNotNull(foundAssignment);
        assertEquals(foundAssignment.get("assignment_name"), updatedTestDAO.assignmentName);
        assertEquals(foundAssignment.get("due_date"), updatedTestDAO.dueDate);
        assertEquals(foundAssignment.get("instructions"), updatedTestDAO.instructions);
        assertEquals(foundAssignment.get("points"), updatedTestDAO.points);
        assertEquals(foundAssignment.get("has_peer_review"), false);
        new AssignmentInterface().removeAssignment((Integer) foundAssignment.get("assignment_id"), "CSC212-800-12313-Spring-2023");
    }

    @Test
    public void addPeerReviewInformation() throws IOException {
        //make an assignment to go into the DB that we will later edit
        AssignmentNoPeerReviewDAO testDAO = new AssignmentNoPeerReviewDAO("CSC212-800-12313-Spring-2023", "Rate your classmate's submission", "Rate your classmate's java solution on a scale of 1-10", "2023-05-15", 10);
        Document madeAssignment = new AssignmentInterface().createAssignmentNoPeerReview(testDAO);
        PeerReviewAddOnDAO peerReviewAddOnDAO = new PeerReviewAddOnDAO("Rate your classmate's performance out of 15", "2023-05-26", 15);
        new AssignmentInterface().addPeerReviewDataToAssignment("CSC212-800-12313-Spring-2023", (int) madeAssignment.get("assignment_id"), peerReviewAddOnDAO);
        //find the assignment with the new peer review data now, ensure it contains all the right values
        Document foundAssignment = new AssignmentInterface().getSpecifiedAssignment("CSC212-800-12313-Spring-2023", (Integer) madeAssignment.get("assignment_id"));
        assertNotNull(foundAssignment);
        assertEquals(foundAssignment.get("assignment_name"), testDAO.assignmentName);
        assertEquals(foundAssignment.get("due_date"), testDAO.dueDate);
        assertEquals(foundAssignment.get("instructions"), testDAO.instructions);
        assertEquals(foundAssignment.get("points"), testDAO.points);
        assertEquals(foundAssignment.get("has_peer_review"), true);
        assertEquals(foundAssignment.get("peer_review_instructions"), peerReviewAddOnDAO.peerReviewInstructions);
        assertEquals(foundAssignment.get("peer_review_due_date"), peerReviewAddOnDAO.peerReviewDueDate);
        assertEquals(foundAssignment.get("peer_review_points"), peerReviewAddOnDAO.peerReviewPoints);
        new AssignmentInterface().removeAssignment((Integer) foundAssignment.get("assignment_id"), "CSC212-800-12313-Spring-2023");
    }


}

